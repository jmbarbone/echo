[{"path":"https://jmbarbone.github.io/echo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 echo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmbarbone.github.io/echo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/echo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2025). echo: Echo Code Evaluations. R package version 0.1.0.9001, https://jmbarbone.github.io/echo/, https://github.com/jmbarbone/echo.","code":"@Manual{,   title = {echo: Echo Code Evaluations},   author = {Jordan Mark Barbone},   year = {2025},   note = {R package version 0.1.0.9001,     https://jmbarbone.github.io/echo/},   url = {https://github.com/jmbarbone/echo}, }"},{"path":"https://jmbarbone.github.io/echo/index.html","id":"echo","dir":"","previous_headings":"","what":"Echo Code Evaluations","title":"Echo Code Evaluations","text":"goal echo provide function evaluating logging script.","code":""},{"path":"https://jmbarbone.github.io/echo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Echo Code Evaluations","text":"Install echo CRAN : Alternatively, can install development version echo GitHub :","code":"install.packages(\"echo\") # install.packages(\"devtools\") devtools::install_github(\"jmbarbone/echo\")"},{"path":"https://jmbarbone.github.io/echo/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Echo Code Evaluations","text":"echo() allows print","code":"library(echo) try(echo(   expr = {     print(1 + 1)     df <- data.frame(a = 1:5, b = letters[1:5])     print(df)     message(\"hello!\")     warning(\"hello!\")     stop(\"error here\")   },   level = 0 ), silent = TRUE) #> [2023-05-22 09:58:20] [EXP] print(1 + 1) #> [2023-05-22 09:58:20] [OUT] #> [1] 2 #> [2023-05-22 09:58:20] [EXP] df <- data.frame(a = 1:5, b = letters[1:5]) #> [2023-05-22 09:58:20] [EXP] print(df) #> [2023-05-22 09:58:20] [OUT] #>   a b #> [2023-05-22 09:58:20] [OUT] #> 1 1 a #> [2023-05-22 09:58:20] [OUT] #> 2 2 b #> [2023-05-22 09:58:20] [OUT] #> 3 3 c #> [2023-05-22 09:58:20] [OUT] #> 4 4 d #> [2023-05-22 09:58:20] [OUT] #> 5 5 e #> [2023-05-22 09:58:20] [EXP] message(\"hello!\") #> [2023-05-22 09:58:20] [MSG] #> hello! #> [2023-05-22 09:58:20] [EXP] warning(\"hello!\") #> [2023-05-22 09:58:20] [WRN] #> hello! #> [2023-05-22 09:58:20] [EXP] stop(\"error here\") #> [2023-05-22 09:58:20] [ERR] #> error here"},{"path":"https://jmbarbone.github.io/echo/reference/echo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"echo: Echo Code Evaluations — echo-package","title":"echo: Echo Code Evaluations — echo-package","text":"Capture code evaluations script executions expressions, outputs, condition calls logging.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/echo/reference/echo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"echo: Echo Code Evaluations — echo-package","text":"Maintainer: Jordan Mark Barbone jmbarbone@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":null,"dir":"Reference","previous_headings":"","what":"Echo — echo","title":"Echo — echo","text":"Echo expression file","code":""},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Echo — echo","text":"","code":"echo(   expr,   log = echo_get_log(),   msg = echo_get_msg(),   level = echo_get_level(),   file = NULL,   exprs = NULL,   progress = getOption(\"echo.progress\", FALSE) )"},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Echo — echo","text":"expr Expression evaluate.  can single expression. expressions within braces (.e., { ... }). log connection file name outputs; defaults stdout() msg Logical, FALSE output message; defaults TRUE level Sets echo level (see details); defaults 0L file File path evaluate (like base::source()).  file NULL, expr must missing` exprs Expressions evaluate.  can single expression. progress Logical, TRUE shows progress bar; defaults FALSE","code":""},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Echo — echo","text":"Nothing, called side-effects","code":""},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Echo — echo","text":"Levels output can controlled level: 0 EXP: logs expressions evaluated 1 : logs outputs expressions 2 MSG: logs messages 3 WRN: logs warnings 4 ERR: logs errors set, outputs level run. Errors always logged interrupt stop program. Timestamps printed UTC default.  control , set option value, options(echo.timezone = \"EST\").","code":""},{"path":"https://jmbarbone.github.io/echo/reference/echo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Echo — echo","text":"","code":"# make sure to use braces for expr echo({ letters }, level = 0) # good #> [2025-01-01 00:12:31] [EXP] letters echo({letters}, level = 0)   # still good #> [2025-01-01 00:12:31] [EXP] letters echo(letters, level = 0)     # also good #> [2025-01-01 00:12:31] [EXP] letters  try(echo(   expr = {     print(1 + 1)     Sys.sleep(2)     head(mtcars)     message(1)     warning(2)     stop(3)   },   level = 0 )) #> [2025-01-01 00:12:31] [EXP] print(1 + 1) #> [2025-01-01 00:12:31] [OUT] #> [1] 2 #> [2025-01-01 00:12:31] [EXP] Sys.sleep(2) #> [2025-01-01 00:12:33] [EXP] head(mtcars) #> [2025-01-01 00:12:33] [EXP] message(1) #> [2025-01-01 00:12:33] [MSG] #> 1 #> [2025-01-01 00:12:33] [EXP] warning(2) #> [2025-01-01 00:12:33] [WRN] #> 2 #> [2025-01-01 00:12:33] [EXP] stop(3) #> [2025-01-01 00:12:33] [ERR] #> 3 #> Error : Error in stop(3) #>   3  # Parse lines in a file instead try(echo(file = system.file(\"example-script.R\", package = \"echo\"))) #> [2025-01-01 00:12:35] [MSG] #> 1 #> [2025-01-01 00:12:35] [WRN] #> 2 #> [2025-01-01 00:12:35] [ERR] #> 3 #> Error : Error in stop(3) #>   3  # Note that x <- c(\"example for\", \"writing lines\") echo({   x   print(x)   writeLines(x) }, level = 0) #> [2025-01-01 00:12:35] [EXP] x #> [2025-01-01 00:12:35] [ERR] #> object 'x' not found #> Error: Error in x #>   object 'x' not found"},{"path":"https://jmbarbone.github.io/echo/news/index.html","id":"echo-development-version","dir":"Changelog","previous_headings":"","what":"echo (development version)","title":"echo (development version)","text":"echo() gains new progress param print progress bar, similar utils::txtProgressBar(style = 3) #2 echo() now handles single expressions better (e.g., echo({ letters }) echo(letters) produce result) echo() gains new expr param evaluate expression object instead expr file","code":""},{"path":"https://jmbarbone.github.io/echo/news/index.html","id":"echo-010","dir":"Changelog","previous_headings":"","what":"echo 0.1.0","title":"echo 0.1.0","text":"CRAN release: 2023-05-25 Added NEWS.md file track changes package.","code":""}]
